#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100
#define MOUSE 5
#define SCROLL 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&lt {
    quick-tap-ms = <300>;
    flavor = "balanced";
};

/ {
    combos {
        compatible = "zmk,combos";

        mouse_btn3 {
            bindings = <&mkp MB3>;
            key-positions = <17 18>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        scroll_up_down: mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };

        scroll_right_left: mouse_wheel_right_left {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_LEFT>, <&msc SCRL_RIGHT>;

            tap-ms = <20>;
        };

        ht_rclk_mo: ht_rclk_mo {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_RCLK_MO";
            #binding-cells = <2>;
            bindings = <&mo>, <&mkp>;

            tapping-term-ms = <170>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W           &kp E              &kp R     &kp T                                                 &kp Y        &kp U  &kp I      &kp O    &kp P
&kp A             &kp S           &kp D              &kp F     &kp G                               &kp F5            &kp H        &kp J  &kp K      &lt 6 L  &lt 6 COLON
&lt 4 Z           &kp X           &kp C              &kp V     &kp B        &mt LEFT_ALT ESCAPE    &kp BACKSPACE     &kp N        &kp M  &kp COMMA  &kp DOT  &kp MINUS
&mt LEFT_ALT TAB  &kp LEFT_SHIFT  &ht_rclk_mo 5 MB2  &mkp MB1  &lt 2 SPACE  &lt 1 LANGUAGE_2       &lt 7 LANGUAGE_1  &lt 3 ENTER                             &lt 1 SLASH
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        symbol {
            bindings = <
&kp LS(EQUAL)  &kp LS(DQT)  &kp LS(SQT)   &kp LS(GRAVE)  &kp LS(PLUS)                          &kp LS(DLLR)  &kp LA(Y)      &kp PIPE       &kp BACKSLASH  &kp SEMICOLON
&kp LS(LPAR)   &kp LBKT     &kp LS(LBRC)  &kp LS(LT)     &kp MINUS                     &trans  &kp PERCENT   &kp AT         &kp POUND      &kp AMPERSAND  &kp COLON
&kp LS(RPAR)   &kp RBKT     &kp LS(RBRC)  &kp LS(GT)     &kp FSLH      &kp LS(STAR)    &trans  &kp LS(EXCL)  &kp LS(QMARK)  &kp LS(TILDE)  &kp TILDE      &kp UNDERSCORE
&trans         &trans       &trans        &trans         &trans        &trans          &trans  &trans                                                     &trans
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        number {
            bindings = <
&trans           &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &trans                    &trans  &trans  &trans  &trans  &trans
&kp DOT          &kt KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &trans            &trans  &trans  &trans  &trans  &trans  &trans
&kp KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans           &trans           &trans           &trans           &trans  &trans    &trans  &trans                          &trans
            >;

            sensor-bindings = <&scroll_right_left>;
        };

        cursor {
            bindings = <
&trans  &trans  &trans  &trans  &trans                    &trans  &trans          &kp UP_ARROW    &trans           &trans
&trans  &trans  &trans  &trans  &trans            &trans  &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans          &trans          &trans           &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans                                                   &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        connect {
            bindings = <
&trans  &trans  &trans  &trans  &trans                         &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans            &trans       &out OUT_BLE  &out OUT_USB  &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans    &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans    &trans       &trans                                                  &bt BT_CLR_ALL
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        shortcut {
            bindings = <
&trans       &trans     &kp LG(LS(N3))  &kp LG(LS(N4))  &trans                           &trans         &trans  &trans  &trans  &trans
&kp LG(A)    &kp LG(S)  &trans          &kp LG(F)       &trans                   &trans  &trans         &trans  &trans  &trans  &trans
&kp LG(Z)    &kp LG(X)  &kp LG(C)       &kp LG(V)       &kp LG(B)      &trans    &trans  &trans         &trans  &trans  &trans  &trans
&kp LG(TAB)  &trans     &trans          &mkp MB3        &kp LG(SPACE)  &trans    &trans  &kp LG(ENTER)                          &trans
            >;

            sensor-bindings = <&scroll_right_left>;
        };

        mouse {
            bindings = <
&trans  &trans  &trans  &trans  &trans                    &trans  &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans            &trans  &trans  &mkp MB1  &mkp MB2  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans                              &trans
            >;
        };

        mission_control {
            bindings = <
&kp LC(N1)  &kp LC(N2)  &kp LC(N3)  &kp LC(N4)  &kp LC(N5)                  &none  &none         &kp LC(UP)    &none          &none
&kp LC(N6)  &kp LC(N7)  &kp LC(N8)  &kp LC(N9)  &kp LC(N0)           &none  &none  &kp LC(LEFT)  &kt LC(DOWN)  &kp LC(RIGHT)  &none
&none       &none       &none       &none       &none       &none    &none  &none  &none         &kp F11       &none          &none
&none       &none       &none       &none       &none       &none    &none  &none                                             &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        shortcut_with_mouse {
            if-layers = <5 6>;
            then-layer = <6>;
        };

        number_with_symbols {
            if-layers = <2 1>;
            then-layer = <1>;
        };
    };
};
